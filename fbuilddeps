##########################################################################################
buildzlib()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_zlib check` ] && return 0
[ -f "$YDL/zlib-1.2.8.tar.gz" ] || ( cd $YDL && curl -LOk http://sourceforge.net/projects/libpng/files/zlib/1.2.8/zlib-1.2.8.tar.gz )
[ -d "$YDEPS/zlib-1.2.8" ] || tar -zxvf $YDL/zlib-1.2.8.tar.gz -C $YDEPS
cd $YDEPS/zlib-1.2.8 && export YZLIB=`pwd` || { echo -e "\n\n\n\nzlib not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_zlib
}

##########################################################################################
buildopenssl()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_openssl check` ] && return 0
[ -f "$YDL/openssl-1.0.1u.tar.gz" ] || ( cd $YDL && curl -LOk https://www.openssl.org/source/openssl-1.0.1u.tar.gz )
[ -d "$YDEPS/openssl-1.0.1u" ] || tar -zxvf $YDL/openssl-1.0.1u.tar.gz -C $YDEPS
cd $YDEPS/openssl-1.0.1u && export YOSSL=`pwd` || { echo -e "\n\n\n\nOpenSSL not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_openssl
}
##########################################################################################
buildberkeleydb()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_berkeleydb check` ] && return 0
[ -f "$YDL/db-4.8.30.NC.tar.gz" ] || ( cd $YDL && curl -LOk http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz )
[ -d "$YDEPS/db-4.8.30.NC" ] || tar -zxvf $YDL/db-4.8.30.NC.tar.gz -C $YDEPS
cd $YDEPS/db-4.8.30.NC && export YBDB=`pwd` || { echo -e "\n\n\n\nBerkley DB not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_berkeleydb
}

##########################################################################################
buildboost()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_boost check` ] && return 0
[ -f "$YDL/boost_1_58_0.tar.bz2" ] || ( cd $YDL && curl -LOk http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.bz2 )
[ -d "$YDEPS/boost_1_58_0" ] || tar -jxvf $YDL/boost_1_58_0.tar.bz2 -C $YDEPS
cd $YDEPS/boost_1_58_0 && export YBOO=`pwd` || { echo -e "\n\n\n\nBoost not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_boost
}
##########################################################################################
buildminiupnpc()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_miniupnpc check` ] && return 0
[ -f "$YDL/miniupnpc-1.9.20150206.tar.gz" ] || ( cd $YDL && curl -Lk http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.20150206.tar.gz > miniupnpc-1.9.20150206.tar.gz )
[ -d "$YDEPS/miniupnpc-1.9.20150206" ] || tar -zxvf $YDL/miniupnpc-1.9.20150206.tar.gz -C $YDEPS
cd $YDEPS/miniupnpc-1.9.20150206 && export YUPNP=`pwd` || { echo -e "\n\n\n\nminiUPnP not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_miniupnpc
}
##########################################################################################
buildlibpng()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_libpng check` ] && return 0
[ -f "$YDL/libpng-1.6.20.tar.gz" ] || ( cd $YDL && curl -LOk https://sourceforge.net/projects/libpng/files/libpng16/older-releases/1.6.20/libpng-1.6.20.tar.gz )
[ -d "$YDEPS/libpng-1.6.20" ] || tar -zxvf $YDL/libpng-1.6.20.tar.gz -C $YDEPS
[ -d "$YZLIB" ] && cd $YDEPS/libpng-1.6.20 && export YPNG=`pwd` || { echo -e "\n\n\n\nlibpng not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_libpng
}
##########################################################################################
buildqrencode()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_qrencode check` ] && return 0
[ -f "$YDL/qrencode-3.4.4.tar.gz" ] || ( cd $YDL && curl -LOk https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz )
[ -d "$YDEPS/qrencode-3.4.4" ] || tar -zxvf $YDL/qrencode-3.4.4.tar.gz -C $YDEPS
[ -d "$YPNG" ] && cd $YDEPS/qrencode-3.4.4 && export YQR=`pwd` || { echo -e "\n\n\n\nQRencode not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_qrencode
}
##########################################################################################
buildpcre()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_pcre check` ] && return 0
[ -f "$YDL/pcre-8.38.tar.bz2" ] || ( cd $YDL && curl -LOk https://sourceforge.net/projects/pcre/files/pcre/8.38/pcre-8.38.tar.bz2 )
[ -d "$YDEPS/pcre-8.38" ] || tar -jxvf $YDL/pcre-8.38.tar.bz2 -C $YDEPS
cd $YDEPS/pcre-8.38 && export YPCRE=`pwd` || { echo -e "\n\n\n\nPCRE not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_pcre
}
##########################################################################################
buildjansson()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_jansson check` ] && return 0
[ -f "$YDL/jansson-2.7.tar.gz" ] || ( cd $YDL && curl -LOk http://www.digip.org/jansson/releases/jansson-2.7.tar.gz )
[ -d "$YDEPS/jansson-2.7" ] || tar -zxvf $YDL/jansson-2.7.tar.gz -C $YDEPS
cd $YDEPS/jansson-2.7 && export YJANS=`pwd` || { echo -e "\n\n\n\nJansson not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_jansson
}
##########################################################################################
buildcurl()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_curl check` ] && return 0
[ -f "$YDL/curl-7.48.0.tar.bz2" ] || ( cd $YDL && curl -LOk https://curl.haxx.se/download/curl-7.48.0.tar.bz2 )
[ -d "$YDEPS/curl-7.48.0" ] || tar -jxvf $YDL/curl-7.48.0.tar.bz2 -C $YDEPS
cd $YDEPS/curl-7.48.0 && export YCURL=`pwd` || { echo -e "\n\n\n\ncURL not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_curl
}
##########################################################################################
buildleveldb()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_leveldb check` ] && return 0
[ -f "$YDL/bitcoin-leveldb-1.17.tar.gz" ] || ( cd $YDL && curl -LOk https://github.com/bitcoin-core/leveldb/archive/bitcoin-leveldb-1.17.tar.gz )
[ -d "$YDEPS/leveldb-bitcoin-leveldb-1.17" ] || tar -xvzf $YDL/bitcoin-leveldb-1.17.tar.gz -C $YDEPS
cd $YDEPS/leveldb-bitcoin-leveldb-1.17 && export YLDB=`pwd` || { echo -e "\n\n\n\nLevelDB not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_leveldb
}
##########################################################################################
buildlibevent()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_libevent check` ] && return 0
[ -f "$YDL/libevent-2.1.8-stable.tar.gz" ] || ( cd $YDL && curl -LOk https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz )
[ -d "$YDEPS/libevent-2.1.8-stable" ] || tar -xvzf $YDL/libevent-2.1.8-stable.tar.gz -C $YDEPS
cd $YDEPS/libevent-2.1.8-stable && export YEVT=`pwd` || { echo -e "\n\n\n\nLibEvent not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_libevent
}
##########################################################################################
buildqt()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_qt check` ] && return 0
[ -f "$YDL/qt-everywhere-opensource-src-4.8.6.tar.gz" ] || ( cd $YDL && curl -LOk http://download.qt.io/archive/qt/4.8/4.8.6/qt-everywhere-opensource-src-4.8.6.tar.gz )
[ -d "$YDEPS/qt-everywhere-opensource-src-4.8.6" ] || tar -zxvf $YDL/qt-everywhere-opensource-src-4.8.6.tar.gz -C $YDEPS
cd $YDEPS/qt-everywhere-opensource-src-4.8.6 && export YQT=`pwd` || { echo -e "\n\n\n\nQT not build.\n\n\n\n"; return 1; }
source $YDIR/scripts/_qt
}
##########################################################################################
buildwxwidgets()
{
[ -f "$YDIR/scripts/ydeps" ] && source $YDIR/scripts/ydeps
[ ! -z `source $YDIR/scripts/_wxwidgets check` ] && return 0
[ -f "$YDL/wxWidgets-3.1.0.tar.bz2" ] || ( cd $YDL && curl -LOk https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.0/wxWidgets-3.1.0.tar.bz2 )
[ -d "$YDEPS/wxWidgets-3.1.0" ] || tar -jxvf $YDL/wxWidgets-3.1.0.tar.bz2 -C $YDEPS
cd $YDEPS/wxWidgets-3.1.0 && export YWX=`pwd` || { echo -e "\n\n\n\nwxWidgets not build.\n\n\n\n"; return 1; }
mkdir -p $YWX/stage && cd $YWX/stage
source $YDIR/scripts/_wxwidgets
}

export -f buildzlib buildopenssl buildberkeleydb buildboost buildminiupnpc buildlibevent buildlibpng buildqrencode buildpcre buildjansson buildcurl buildleveldb buildqt buildwxwidgets





