##########################################################################################
buildboost()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YBOO/stage/lib" ] && [ `find $YBOO/stage/lib/* -prune -name "*.a" ! -name "*.dll.a" | wc -l` -gt 6 ] && return 0
[ -f "$YDL/boost_1_58_0.7z" ] || ( cd $YDL && curl -L -k http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.7z > boost_1_58_0.7z )
[ -d "$YDEPS/boost_1_58_0" ] || 7za x -aoa $YDL/boost_1_58_0.7z -o$YDEPS
cd $YDEPS/boost_1_58_0 && export YBOO=`pwd` || { echo -e "\n\n\n\nBoost not build.\n\n\n\n"; return 1; }

if [ "$1" = "zlib" ]; then
[ -d "$YZLIB" ] || { echo -e "\n\n\n\nBoost not build. Check YZLIB directory.\n\n\n\n"; return 1; }
sed 's/date_time/date_time\ --with-serialization\ --with-iostreams\ -s\ ZLIB_SOURCE="%YZLIB%"/' $YBASE/scripts/cmdboost.bat > ./cmdboost.bat
else
cp $YBASE/scripts/cmdboost.bat .
fi

if ! grep Q_MOC_RUN $YBOO/boost/type_traits/detail/has_binary_operator.hpp > /dev/null; then
echo "#ifndef Q_MOC_RUN" > tmpf
cat $YBOO/boost/type_traits/detail/has_binary_operator.hpp >> tmpf
echo "#endif // Q_MOC_RUN" >> tmpf
mv tmpf $YBOO/boost/type_traits/detail/has_binary_operator.hpp
fi

start cmdboost.bat

if ! grep YBOO $YBASE/scripts/ydeps > /dev/null; then echo "YBOO=$YBOO" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildopenssl()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YOSSL/build/lib" ] && [ `find $YOSSL/build/lib/* -prune -name "*.a" ! -name "*.dll.a" | wc -l` -gt 1 ] && return 0
[ -f "$YDL/openssl-1.0.1s.tar.gz" ] || ( cd $YDL && curl -L -k https://www.openssl.org/source/openssl-1.0.1s.tar.gz > openssl-1.0.1s.tar.gz )
[ -d "$YDEPS/openssl-1.0.1s" ] || 7za e -aoa $YDL/openssl-1.0.1s.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/openssl-1.0.1s && export YOSSL=`pwd` || { echo -e "\n\n\n\nOpenSSL not build.\n\n\n\n"; return 1; }


perl Configure mingw no-asm no-shared --openssldir=$YOSSL/build
cat Makefile | sed 's/^PERL=.*$/PERL=perl/' | sed 's/i486/i686\ -Wno-unused-value/' > tmpf
mv tmpf Makefile
make build_libs build_apps
make install_sw

if ! grep YOSSL $YBASE/scripts/ydeps > /dev/null; then echo "YOSSL=$YOSSL" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildberkeleydb()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YBDB/build_unix" ] && [ `find $YBDB/build_unix/* -prune -name "*.a" ! -name "*.dll.a" | wc -l` -gt 3 ] && return 0
[ -f "$YDL/db-4.8.30.NC.tar.gz" ] || ( cd $YDL && curl -L -k http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz > db-4.8.30.NC.tar.gz )
[ -d "$YDEPS/db-4.8.30.NC" ] || 7za e -aoa $YDL/db-4.8.30.NC.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/db-4.8.30.NC && export YBDB=`pwd` || { echo -e "\n\n\n\nBerkley DB not build.\n\n\n\n"; return 1; }


cd $YBDB/build_unix
../dist/configure CXXFLAGS='-std=gnu++0x' --enable-mingw --enable-cxx --disable-replication --disable-shared
make

if ! grep YBDB $YBASE/scripts/ydeps > /dev/null; then echo "YBDB=$YBDB" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildminiupnpc()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YUPNP" ] && [ -f "`find $YUPNP/* -prune -name "*.a" ! -name "*.dll.a" | head -1`" ] && return 0
[ -f "$YDL/miniupnpc-1.9.20150206.tar.gz" ] || ( cd $YDL && curl -L -k http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.20150206.tar.gz > miniupnpc-1.9.20150206.tar.gz )
[ -d "$YDEPS/miniupnpc-1.9.20150206" ] || 7za e -aoa $YDL/miniupnpc-1.9.20150206.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/miniupnpc-1.9.20150206 && export YUPNP=`pwd` || { echo -e "\n\n\n\nminiUPnP not build.\n\n\n\n"; return 1; }


cat Makefile.mingw | sed 's/^LDLIBS\ =/LDLIBS\ =\ -static\ -static-libgcc\ -s/' > tmpf
mv tmpf Makefile.mingw
make -f Makefile.mingw init upnpc-static

if ! grep YUPNP $YBASE/scripts/ydeps > /dev/null; then echo "YUPNP=$YUPNP" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildzlib()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YZLIB" ] && [ -f "`find $YZLIB/* -prune -name "*.a" ! -name "*.dll.a" | head -1`" ] && return 0
[ -f "$YDL/zlib-1.2.8.tar.gz" ] || ( cd $YDL && curl -L -k http://sourceforge.net/projects/libpng/files/zlib/1.2.8/zlib-1.2.8.tar.gz > zlib-1.2.8.tar.gz )
[ -d "$YDEPS/zlib-1.2.8" ] || 7za e -aoa $YDL/zlib-1.2.8.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/zlib-1.2.8 && export YZLIB=`pwd` || { echo -e "\n\n\n\nzlib not build.\n\n\n\n"; return 1; }

make -f win32/Makefile.gcc libz.a

if ! grep YZLIB $YBASE/scripts/ydeps > /dev/null; then echo "YZLIB=$YZLIB" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildlibpng()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YPNG/.libs" ] && [ -f "`find $YPNG/.libs/* -prune -name "*.a" ! -name "*.dll.a" | head -1`" ] && return 0
[ -f "$YDL/libpng-1.6.20.tar.gz" ] || ( cd $YDL && curl -L -k https://sourceforge.net/projects/libpng/files/libpng16/older-releases/1.6.20/libpng-1.6.20.tar.gz > libpng-1.6.20.tar.gz )
[ -d "$YDEPS/libpng-1.6.20" ] || 7za e -aoa $YDL/libpng-1.6.20.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
[ -d "$YZLIB" ] && cd $YDEPS/libpng-1.6.20 && export YPNG=`pwd` || { echo -e "\n\n\n\nlibpng not build.\n\n\n\n"; return 1; }


./configure CPPFLAGS="-I $YZLIB" LDFLAGS="-L$YZLIB" --disable-shared --enable-static
cat Makefile | sed 's/\/usr\/bin\///' > tmpf
mv tmpf Makefile
make

if ! grep YPNG $YBASE/scripts/ydeps > /dev/null; then echo "YPNG=$YPNG" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildqrencode()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YQR/.libs" ] && [ -f "`find $YQR/.libs/* -prune -name "*.a" ! -name "*.dll.a" | head -1`" ] && return 0
[ -f "$YDL/qrencode-3.4.4.tar.gz" ] || ( cd $YDL && curl -L -k https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz > qrencode-3.4.4.tar.gz )
[ -d "$YDEPS/qrencode-3.4.4" ] || 7za e -aoa $YDL/qrencode-3.4.4.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
[ -d "$YPNG" ] && cd $YDEPS/qrencode-3.4.4 && export YQR=`pwd` || { echo -e "\n\n\n\nQRencode not build.\n\n\n\n"; return 1; }


pnglib=`find $YPNG/.libs/* -prune -name "*.a" ! -name "*.dll.a" | awk -Flib '{print $(NF)}' | cut -d'.' -f1`
./configure LDFLAGS="-static -static-libgcc -s" png_CFLAGS="-I $YPNG" png_LIBS="-L$YPNG/.libs -l$pnglib" --disable-shared --without-tools
make

if ! grep YQR $YBASE/scripts/ydeps > /dev/null; then echo "YQR=$YQR" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildqt()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YQT/lib" ] && [ `find $YQT/lib/* -prune -name "*.a" ! -name "*.dll.a" | wc -l` -gt 16 ] && return 0
[ -f "$YDL/qt-everywhere-opensource-src-4.8.6.tar.gz" ] || ( cd $YDL && curl -L -k http://download.qt.io/archive/qt/4.8/4.8.6/qt-everywhere-opensource-src-4.8.6.tar.gz > qt-everywhere-opensource-src-4.8.6.tar.gz )
[ -d "$YDEPS/qt-everywhere-opensource-src-4.8.6" ] || 7za e -aoa $YDL/qt-everywhere-opensource-src-4.8.6.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/qt-everywhere-opensource-src-4.8.6 && export YQT=`pwd` || { echo -e "\n\n\n\nQT not build.\n\n\n\n"; return 1; }


head -1 $YQT/mkspecs/win32-g++-4.6/qmake.conf > tmpf
echo "QMAKE_CXXFLAGS *= -std=gnu++0x" >> tmpf
echo "QMAKE_LFLAGS = -static -static-libgcc -static-libstdc++ -s" >> tmpf
mv tmpf $YQT/mkspecs/win32-g++-4.6/qmake.conf

sed s/-static-libgcc/-static\ -static-libgcc\ -static-libstdc++/ $YQT/qmake/Makefile.win32-g++ > tmpf
mv tmpf $YQT/qmake/Makefile.win32-g++

sed s/-static-libgcc/-static\ -static-libgcc/ $YQT/qmake/Makefile.win32-g++-sh > tmpf
mv tmpf $YQT/qmake/Makefile.win32-g++-sh

awk -v addtxt=" && defined(SKIPHACK)" '/defined\(QT_NO_THREAD\)\ \&\&\ defined\(_POSIX_THREAD_SAFE_FUNCTIONS\)/ {$0=$0addtxt} 1' $YQT/src/corelib/tools/qdatetime.cpp > tmpf
mv tmpf $YQT/src/corelib/tools/qdatetime.cpp

./configure.exe -release -static -opensource -confirm-license -platform win32-g++-4.6 -no-sql-sqlite -no-qt3support -no-opengl -qt-zlib -no-gif -qt-libpng -qt-libmng -no-libtiff -qt-libjpeg -no-dsp -no-vcproj -no-openssl -no-dbus -no-phonon -no-phonon-backend -no-multimedia -no-audio-backend -no-webkit -no-script -no-scripttools -no-declarative -no-declarative-debug -qt-style-windows -qt-style-windowsxp -qt-style-windowsvista -no-style-plastique -no-style-cleanlooks -no-style-motif -no-style-cde -nomake demos -nomake examples
make

if ! grep YQT $YBASE/scripts/ydeps > /dev/null; then echo "YQT=$YQT" >> $YBASE/scripts/ydeps; fi
if [ `echo $PATH | grep qt-everywhere | wc -l` -eq 0 ]; then export PATH=$PATH:$YQT/bin; fi

}
##########################################################################################
buildwxwidgets()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YWX/lib/gcc_lib" ] && [ `find $YWX/lib/gcc_lib/* -prune -name "*.a" ! -name "*.dll.a" | wc -l` -gt 21 ] && return 0
[ -f "$YDL/wxWidgets-3.1.0.tar.bz2" ] || ( cd $YDL && curl -L -k https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.0/wxWidgets-3.1.0.tar.bz2 > wxWidgets-3.1.0.tar.bz2 )
[ -d "$YDEPS/wxWidgets-3.1.0" ] || 7za e -aoa $YDL/wxWidgets-3.1.0.tar.bz2 -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/wxWidgets-3.1.0 && export YWX=`pwd` || { echo -e "\n\n\n\nwxWidgets not build.\n\n\n\n"; return 1; }

if [ "$1" = "base" ]; then

mkdir wxbase
cd wxbase
../configure CXXFLAGS="-std=gnu++0x -Wno-unused-variable -Wno-deprecated-declarations" LDFLAGS="-static -static-libgcc -static-libstdc++ -s" --build=x86-winnt-mingw32 --disable-gui --disable-shared --enable-unicode
YTMP=`cygpath -m $YBASE | sed 's/\//\\\\\//g'`
sed -i 's/\ \'$YBASE'/\ '$YTMP'/' Makefile
make
mkdir -p $YWX/lib/gcc_lib
cp -r `grep static wx-config | awk -F'/' '{print "lib/wx/include/"$NF}' | cut -d '"' -f 1` $YWX/lib/gcc_lib/mswu
YTMP=`ls lib | grep "baseu-" | cut -d'-' -f2 | sed 's/\.//g' | cut -d'a' -f1`
for file in `ls lib | grep ".a"` ; do cp lib/$file $YWX/lib/gcc_lib/`echo $file | sed 's/\_//' | sed 's/baseu/base'$YTMP'u/' | cut -d'-' -f1`".a"; done

else

cd build/msw
make CXXFLAGS="-std=gnu++0x -march=i686 -Wno-unused-variable -Wno-deprecated-declarations" LDFLAGS="-static -static-libgcc -static-libstdc++ -s" -f makefile.gcc SHARED=0 UNICODE=1 BUILD=release RUNTIME_LIBS=static clean
make CXXFLAGS="-std=gnu++0x -march=i686 -Wno-unused-variable -Wno-deprecated-declarations" LDFLAGS="-static -static-libgcc -static-libstdc++ -s" -f makefile.gcc SHARED=0 UNICODE=1 BUILD=release RUNTIME_LIBS=static

fi

if ! grep YWX $YBASE/scripts/ydeps > /dev/null; then echo "YWX=$YWX" >> $YBASE/scripts/ydeps; fi
if [ `echo $PATH | grep wxWidgets | wc -l` -eq 0 ]; then export PATH=$YWX/bin:$PATH; fi

}
##########################################################################################
buildwxfolder()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -d "$YWX" ] && cd $YWX || { echo -e "\n\n\n\nwxfolder not build. Check YWX directory.\n\n\n\n"; return 1; }
[ -d "$YWX/wxfolder" ] && return 0

git clone https://github.com/senadj/wxfolder
source wxfolder/fwx-tdm

if [ "$1" = "base" ]; then

buildwxconfig
buildyconfig
buildwxjson

else

make -f wxfolder/Makefile

fi

}
##########################################################################################
buildpcre()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -f "$YPCRE/.libs/libpcre.a" ] && return 0
[ -f "$YDL/pcre-8.38.tar.bz2" ] || ( cd $YDL && curl -L -k https://sourceforge.net/projects/pcre/files/pcre/8.38/pcre-8.38.tar.bz2 > pcre-8.38.tar.bz2 )
[ -d "$YDEPS/pcre-8.38" ] || 7za e -aoa $YDL/pcre-8.38.tar.bz2 -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/pcre-8.38 && export YPCRE=`pwd` || { echo -e "\n\n\n\nPCRE not build.\n\n\n\n"; return 1; }

./configure LDFLAGS='-static -static-libgcc -s' --disable-shared --enable-static
make libpcre.la

if ! grep YPCRE $YBASE/scripts/ydeps > /dev/null; then echo "YPCRE=$YPCRE" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildjansson()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -f "$YJANS/src/.libs/libjansson.a" ] && return 0
[ -f "$YDL/jansson-2.7.tar.gz" ] || ( cd $YDL && curl -L -k http://www.digip.org/jansson/releases/jansson-2.7.tar.gz > jansson-2.7.tar.gz )
[ -d "$YDEPS/jansson-2.7" ] || 7za e -aoa $YDL/jansson-2.7.tar.gz -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/jansson-2.7 && export YJANS=`pwd` || { echo -e "\n\n\n\nJansson not build.\n\n\n\n"; return 1; }

./configure LDFLAGS='-static -static-libgcc -s' --disable-shared --enable-static
make

if ! grep YJANS $YBASE/scripts/ydeps > /dev/null; then echo "YJANS=$YJANS" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildcurl()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -f "$YCURL/lib/.libs/libcurl.a" ] && return 0
[ -f "$YDL/curl-7.48.0.tar.bz2" ] || ( cd $YDL && curl -L -k https://curl.haxx.se/download/curl-7.48.0.tar.bz2 > curl-7.48.0.tar.bz2 )
[ -d "$YDEPS/curl-7.48.0" ] || 7za e -aoa $YDL/curl-7.48.0.tar.bz2 -so | 7za x -aoa -si -ttar -o$YDEPS
cd $YDEPS/curl-7.48.0 && export YCURL=`pwd` || { echo -e "\n\n\n\ncURL not build.\n\n\n\n"; return 1; }

if [ "$1" = "openssl" ]; then
[ -d "$YOSSL" ] || { echo -e "\n\n\n\ncURL not build. Check YOSSL directory.\n\n\n\n"; return 1; }
./configure LDFLAGS='-static -static-libgcc -s' --disable-shared --disable-debug --with-ssl=$YOSSL/build
else
./configure LDFLAGS='-static -static-libgcc -s' --disable-shared --disable-debug --without-ssl
fi

find . -name Makefile | xargs sed -i 's/\/usr\/bin\/mkdir/mkdir/g'
make

if ! grep YCURL $YBASE/scripts/ydeps > /dev/null; then echo "YCURL=$YCURL" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildleveldb()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -f "$YLDB/libleveldb.a" ] && return 0
[ -f "$YDL/leveldb-bitcoin-fork.zip" ] || ( cd $YDL && curl -L -k https://github.com/bitcoin-core/leveldb/archive/bitcoin-fork.zip > leveldb-bitcoin-fork.zip )
[ -d "$YDEPS/leveldb-bitcoin-fork" ] || unzip -d $YDEPS $YDL/leveldb-bitcoin-fork.zip
cd $YDEPS/leveldb-bitcoin-fork && export YLDB=`pwd` || { echo -e "\n\n\n\nLevelDB not build.\n\n\n\n"; return 1; }

TARGET_OS=NATIVE_WINDOWS OPT="-std=gnu++0x -msse2" make libleveldb.a libmemenv.a

if ! grep YLDB $YBASE/scripts/ydeps > /dev/null; then echo "YLDB=$YLDB" >> $YBASE/scripts/ydeps; fi

}
##########################################################################################
buildvanitygen()
{
[ -f "$YBASE/scripts/ydeps" ] && source $YBASE/scripts/ydeps
[ -f "$YDEPS/vanitygen/vanitygen.exe" ] && return 0
[ -d "$YOSSL" ] || { echo -e "\n\n\n\nVanitygen not build. Check YOSSL directory.\n\n\n\n"; return 1; }
[ -d "$YPCRE" ] || { echo -e "\n\n\n\nVanitygen not build. Check YPCRE directory.\n\n\n\n"; return 1; }

[ -f "$YDL/vanitygen-master.zip" ] || ( cd $YDL && curl -L -k https://github.com/senadj/vanitygen/archive/master.zip > vanitygen-master.zip )
[ -d "$YDEPS/vanitygen-master" ] || unzip -d $YDEPS $YDL/vanitygen-master.zip
cd $YDEPS/vanitygen-master || { echo -e "\n\n\n\nvanitygen not build.\n\n\n\n"; return 1; }

gcc -O3 -w -I$YOSSL/build/include -I$YPCRE -D_WIN32 -DPCRE_STATIC -c pattern.c util.c winglue.c vanitygen.c
gcc -static -static-libgcc -s pattern.o util.o winglue.o vanitygen.o -o vanitygen -L$YOSSL/build/lib -L$YPCRE/.libs -lcrypto -lpcre -lgdi32 -lpthread

}


export -f buildzlib buildqt buildqrencode buildopenssl buildminiupnpc buildlibpng buildboost buildberkeleydb buildwxwidgets buildwxfolder buildpcre buildjansson buildcurl buildleveldb buildvanitygen

